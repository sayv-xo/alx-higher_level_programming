============================
The ``0-add_integer`` module
============================

This module has one function ``add_integer`` which accepts one or two
arguments, an int or float and returns the sum which is an integer.
When one argument is passed, there is a default value of 98 which is added
to return the sum.
A ``TypeError`` exception is raised if neither argument is int or float.

Using ``add_integer``
--------------------

Importing the ``add_integer`` function
=====================================
    >>> add_integer = __import__('0-add_integer').add_integer

Adding two integers:
--------------------
    >>> add_integer(45, 24)
    69

Adding a negative and positive integer:
---------------------------------------
    >>> add_integer(485, -65)
    420

Adding two negative integers:
-----------------------------
    >>> add_integer(-7, -8)
    -15

Adding an integer and a float:
------------------------------
    >>> add_integer(21.9, 13)
    34

Adding two floats:
------------------
    >>> add_integer(12.2, 18.0)
    30

Passing a single int argument:
-----------------------------
    >>> add_integer(45)
    143

Passing a single float argument:
-------------------------------
    >>> add_integer(1.4)
    99

Adding a letter and a number:
-----------------------------
    >>> add_integer('1', 1)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Adding an integer and a letter:
------------------------------
    >>> add_integer(1, '2')
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Passing a string as argument:
----------------------------
    >>> add_integer('kitty')
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Adding two strings:
-------------------
    >>> add_integer('rule', '34')
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Adding an integer and a tuple:
------------------------------
    >>> add_integer(4, (1,))
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Adding a tuple and an integer:
------------------------------
    >>> add_integer((1, 4), 5)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Adding a bool and an int:
-------------------------
    >>> add_integer(True, 45)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Adding an int and a bool:
-------------------------
    >>> add_integer(4, False)
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Passing no argument:
--------------------
    >>> add_integer()
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Adding an int and a list:
-------------------------
    >>> add_integer(5, [1, 5])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Adding a list and an int:
-------------------------
    >>> add_integer([1], 4)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Case for None:
-------------
    >>> add_integer(5, None)
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer(None, 69)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Case for NaN:
-------------
    >>> add_integer(5, float('NaN'))
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer

    >>> add_integer(44, float('nan'))
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer

Case for overflow or infinity:
------------------------------
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer
